/// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.1;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";

contract Eternia is ERC721Enumerable, Ownable {

    struct TokenInfo {
        IERC20 paytoken;
        uint32 costvalue;
    }

    TokenInfo[] public AllowedPayments;
    
    using Strings for uint256;
    string public baseURI;
    string public baseExtension = ".json";
    uint32 public maxSupply = 222;
    uint32 public maxMintAmount = 1;
    bool public paused = false;

    constructor() ERC721("Eternia", "ETERNIA") {}

    function addCurrency(IERC20 _paytoken, uint32 _costvalue) public onlyOwner {
        AllowedPayments.push(TokenInfo({
                paytoken: _paytoken,
                costvalue: _costvalue
            })
        );
    }

    function _baseURI() internal view virtual override returns (string memory) {
    return "ipfs/QmPXDC4p7AJRWB9xP7ZLy4NyySLot5782KQwtfT2yJRxKi/";
    }

    function mint(address _to, uint32 _mintAmount, uint32 _pid) public payable {
        TokenInfo storage tokens = AllowedPayments[_pid];
        IERC20 paytoken;
        paytoken = tokens.paytoken;
        uint32 cost;
        cost = tokens.costvalue;
        uint256 supply = totalSupply();
        require(!paused);
        require(_mintAmount > 0);
        require(_mintAmount <= maxMintAmount);
        require(supply + _mintAmount <= maxSupply);
            
            if (msg.sender != owner()) {
            require(msg.value == cost * _mintAmount, "Insufficient balance.");
            }
            
            for (uint32 i = 1; i <= _mintAmount; i++) {
                paytoken.transferFrom(msg.sender, address(this), cost);
                _safeMint(_to, supply + i);
            }
        }

        function ownerWallet(address _owner) public view returns (uint256[] memory) {
            uint256 ownerTokenCount = balanceOf(_owner);
            uint256[] memory tokenIds = new uint256[](ownerTokenCount);
            for (uint256 i; i < ownerTokenCount; i++) {
                tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
            }
            return tokenIds;
        }
    
        function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
            require(_exists(tokenId),"Nonexistent token");
                string memory currentBaseURI = _baseURI();
                return
                bytes(currentBaseURI).length > 0 
                ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))
                : "";
        }

        function setmaxMintAmount(uint32 _newmaxMintAmount) public onlyOwner() {
            maxMintAmount = _newmaxMintAmount;
        }
        
        function setBaseURI(string memory _newBaseURI) public onlyOwner() {
            baseURI = _newBaseURI;
        }
        
        function setBaseExtension(string memory _newBaseExtension) public onlyOwner() {
            baseExtension = _newBaseExtension;
        }

        function pause(bool _state) public onlyOwner() {
            paused = _state;
        }

        function withdraw() public payable onlyOwner {
        /// This will pay the Community Wallet 20% of the initial sale.
        (bool hs, ) = payable(0x5c6B0f7Bf3E7ce046039Bd8FABdfD3f9F5021678).call{value: address(this).balance * 20 / 100}("Community");
        require(hs);
        /// This will payout the contract / owner 80% of the contract balance.
        (bool os, ) = payable(owner()).call{value: address(this).balance}("Project");
        require(os);
        }
        
        function withdraw(uint32 _pid) public payable onlyOwner() {
            TokenInfo storage tokens = AllowedPayments[_pid];
            IERC20 paytoken;
            paytoken = tokens.paytoken;
            paytoken.transfer(msg.sender, paytoken.balanceOf(address(this)));
        }

        }
        
